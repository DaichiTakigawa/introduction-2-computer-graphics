/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/i1/index.ts":
/*!*************************!*\
  !*** ./src/i1/index.ts ***!
  \*************************/
/***/ (() => {

eval("var canvas = document.createElement('canvas');\nvar context = canvas.getContext('2d');\nfunction smooth_gaussian(width, height, original, smoothed, sigma) {\n    var r = Math.ceil(sigma * 3);\n    var r2 = 2 * r + 1;\n    // precompute spatial stencil\n    var stencil = new Float32Array(r2 * r2);\n    for (var dy = -r; dy <= r; ++dy)\n        for (var dx = -r; dx <= r; ++dx) {\n            var h = Math.sqrt(dx * dx + dy * dy);\n            var idx = dx + r + r2 * (dy + r);\n            stencil[idx] = Math.exp((-h * h) / (2 * sigma * sigma));\n        }\n    // apply filter\n    for (var py = 0; py < height; py++)\n        for (var px = 0; px < width; px++) {\n            var idx0 = px + width * py;\n            var r_sum = 0;\n            var g_sum = 0;\n            var b_sum = 0;\n            var w_sum = 0;\n            for (var dy = -r; dy <= r; ++dy)\n                for (var dx = -r; dx <= r; ++dx) {\n                    var px1 = px + dx;\n                    var py1 = py + dy;\n                    if (0 <= px1 && 0 <= py1 && px1 < width && py1 < height) {\n                        var w = stencil[dx + r + r2 * (dy + r)];\n                        var idx1 = px1 + width * py1;\n                        var r1 = original[4 * idx1];\n                        var g1 = original[4 * idx1 + 1];\n                        var b1 = original[4 * idx1 + 2];\n                        r_sum += w * r1;\n                        g_sum += w * g1;\n                        b_sum += w * b1;\n                        w_sum += w;\n                    }\n                }\n            smoothed[4 * idx0] = r_sum / w_sum;\n            smoothed[4 * idx0 + 1] = g_sum / w_sum;\n            smoothed[4 * idx0 + 2] = b_sum / w_sum;\n            smoothed[4 * idx0 + 3] = 255;\n        }\n}\nfunction smooth_bilateral(width, height, original, smoothed, sigma_space, sigma_range) {\n    var r = Math.ceil(sigma_space * 3);\n    var r2 = 2 * r + 1;\n    // precompute spatial stencil\n    var stencil = new Float32Array(r2 * r2);\n    for (var dy = -r; dy <= r; ++dy)\n        for (var dx = -r; dx <= r; ++dx) {\n            var h = Math.sqrt(dx * dx + dy * dy);\n            var idx = dx + r + r2 * (dy + r);\n            stencil[idx] = Math.exp((-h * h) / (2 * sigma_space * sigma_space));\n        }\n    // apply filter\n    for (var py = 0; py < height; py++)\n        for (var px = 0; px < width; px++) {\n            var idx0 = px + width * py;\n            var r_sum = 0;\n            var g_sum = 0;\n            var b_sum = 0;\n            var w_sum = 0;\n            for (var dy = -r; dy <= r; ++dy)\n                for (var dx = -r; dx <= r; ++dx) {\n                    var px1 = px + dx;\n                    var py1 = py + dy;\n                    if (0 <= px1 && 0 <= py1 && px1 < width && py1 < height) {\n                        var w_space = stencil[dx + r + r2 * (dy + r)];\n                        var idx1 = px1 + width * py1;\n                        var r1 = original[4 * idx1];\n                        var g1 = original[4 * idx1 + 1];\n                        var b1 = original[4 * idx1 + 2];\n                        var r0 = original[4 * idx0];\n                        var g0 = original[4 * idx0 + 0];\n                        var b0 = original[4 * idx0 + 2];\n                        var h = Math.sqrt((r0 - r1) * (r0 - r1) +\n                            (g0 - g1) * (g0 - g1) +\n                            (b1 - b0) * (b1 - b0));\n                        var w_range = Math.exp((-h * h) / (2 * sigma_range * sigma_space));\n                        var w = w_space * w_range;\n                        r_sum += w * r1;\n                        g_sum += w * g1;\n                        b_sum += w * b1;\n                        w_sum += w;\n                    }\n                }\n            smoothed[4 * idx0] = r_sum / w_sum;\n            smoothed[4 * idx0 + 1] = g_sum / w_sum;\n            smoothed[4 * idx0 + 2] = b_sum / w_sum;\n            smoothed[4 * idx0 + 3] = 255;\n        }\n}\nfunction subtract(width, height, original, smoothed, detail) {\n    for (var i = 0; i < width * height; ++i) {\n        for (var j = 0; j < 3; ++j) {\n            var ij = 4 * i + j;\n            detail[ij] = 128 + original[ij] - smoothed[ij];\n        }\n        detail[4 * i + 3] = 255;\n    }\n}\nfunction enhance_detail(width, height, smoothed, detail, scaling, enhanced) {\n    for (var i = 0; i < width * height; ++i) {\n        for (var j = 0; j < 3; ++j) {\n            var ij = 4 * i + j;\n            enhanced[ij] = Math.min(255, Math.max(0, smoothed[ij] + scaling * (detail[ij] - 128)));\n        }\n        enhanced[4 * i + 3] = 255;\n    }\n}\nfunction init() {\n    var img_original = document.getElementById('img_original');\n    var img_smoothed = document.getElementById('img_smoothed');\n    var img_detail = document.getElementById('img_detail');\n    var img_enhanced = document.getElementById('img_enhanced');\n    img_original.onload = function () {\n        canvas.width = img_original.width;\n        canvas.height = img_original.height;\n        img_smoothed.width = img_original.width;\n        img_smoothed.height = img_original.height;\n        img_detail.width = img_original.width;\n        img_detail.height = img_original.height;\n        img_enhanced.width = img_original.width;\n        img_enhanced.height = img_original.height;\n    };\n    var input_file_original = document.getElementById('input_file_original');\n    input_file_original.onchange = function () {\n        var reader = new FileReader();\n        reader.readAsDataURL(input_file_original.files[0]);\n        reader.onload = function () {\n            img_original.src = String(reader.result);\n        };\n    };\n    var btn_do_smoothing = document.getElementById('btn_do_smoothing');\n    btn_do_smoothing.onclick = function () {\n        var width = canvas.width;\n        var height = canvas.height;\n        // read original\n        context.drawImage(img_original, 0, 0);\n        var original = context.getImageData(0, 0, width, height);\n        // do smoothing\n        var smoothed = context.createImageData(width, height);\n        var sigma_space = Number(document.getElementById('input_num_sigma_space')\n            .value);\n        var sigma_range = Number(document.getElementById('input_num_sigma_range')\n            .value);\n        if (document.getElementById('input_chk_use_bilateral')\n            .checked)\n            smooth_bilateral(width, height, original.data, smoothed.data, sigma_space, sigma_range);\n        else\n            smooth_gaussian(width, height, original.data, smoothed.data, sigma_space);\n        context.putImageData(smoothed, 0, 0);\n        img_smoothed.src = canvas.toDataURL();\n        // detail = original - smoothed\n        var detail = context.createImageData(width, height);\n        subtract(width, height, original.data, smoothed.data, detail.data);\n        context.putImageData(detail, 0, 0);\n        img_detail.src = canvas.toDataURL();\n    };\n    document.getElementById('btn_enhance_detail').onclick = function () {\n        var width = canvas.width;\n        var height = canvas.height;\n        // read smoothed and detail\n        context.drawImage(img_smoothed, 0, 0);\n        var smoothed = context.getImageData(0, 0, width, height);\n        context.drawImage(img_detail, 0, 0);\n        var detail = context.getImageData(0, 0, width, height);\n        // enhanced = smoothed + scale * detail\n        var enhanced = context.createImageData(width, height);\n        var detail_scaling = Number(document.getElementById('input_num_detail_scaling')\n            .value);\n        enhance_detail(width, height, smoothed.data, detail.data, detail_scaling, enhanced.data);\n        context.putImageData(enhanced, 0, 0);\n        img_enhanced.src = canvas.toDataURL();\n    };\n    img_original.src =\n        'https://cdn.glitch.com/1214143e-0c44-41fb-b1ad-e9aa3347cdaa%2Frock.png?v=1562148154890';\n}\nwindow.init = init;\n\n\n//# sourceURL=webpack://introduction-2-computer-graphics/./src/i1/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/i1/index.ts"]();
/******/ 	
/******/ })()
;